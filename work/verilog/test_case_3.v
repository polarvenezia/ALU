/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module test_case_3 (
    input clk,
    input rst,
    output reg [7:0] a_out,
    output reg [7:0] b_out,
    output reg [7:0] out,
    output reg [5:0] alufn
  );
  
  
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [5:0] opcode;
  
  localparam TEST_A = 8'h24;
  
  localparam TEST_B = 8'h4c;
  
  localparam TEST_SHIFT_B = 8'h02;
  
  localparam ADD_AB = 8'h70;
  
  localparam SUB_AB = 8'hd8;
  
  localparam AND_AB = 8'h04;
  
  localparam OR_AB = 8'h6c;
  
  localparam XOR_AB = 8'h68;
  
  localparam A_AB = 8'h24;
  
  localparam SHL_A = 8'h90;
  
  localparam SHR_A = 8'h09;
  
  localparam SRA_A = 8'h09;
  
  localparam CMPEQ_AB = 8'h00;
  
  localparam CMPLE_AB = 8'h01;
  
  localparam CMPLT_AB = 8'h01;
  
  localparam MUL_AB = 8'hb0;
  
  localparam START_state = 4'd0;
  localparam ADD_state = 4'd1;
  localparam SUB_state = 4'd2;
  localparam AND_state = 4'd3;
  localparam OR_state = 4'd4;
  localparam XOR_state = 4'd5;
  localparam A_state = 4'd6;
  localparam SHL_state = 4'd7;
  localparam SHR_state = 4'd8;
  localparam SRA_state = 4'd9;
  localparam CMPEQ_state = 4'd10;
  localparam CMPLE_state = 4'd11;
  localparam CMPLT_state = 4'd12;
  localparam MUL_state = 4'd13;
  localparam PASS_state = 4'd14;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  wire [1-1:0] M_myBlinker_blink;
  wire [27-1:0] M_myBlinker_hold_time;
  blinker_5 myBlinker (
    .clk(clk),
    .rst(rst),
    .blink(M_myBlinker_blink),
    .hold_time(M_myBlinker_hold_time)
  );
  
  wire [8-1:0] M_my_alu_out;
  alu_6 my_alu (
    .a(a),
    .b(b),
    .alufn(opcode),
    .out(M_my_alu_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    opcode = 1'h0;
    out = M_my_alu_out;
    a = 8'h24;
    b = 8'h4c;
    a_out = a;
    b_out = b;
    alufn = opcode;
    
    case (M_state_q)
      START_state: begin
        if (M_myBlinker_hold_time == 1'h1) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        opcode = 6'h00;
        if (M_my_alu_out == 8'h70 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = SUB_state;
        end
      end
      SUB_state: begin
        opcode = 6'h01;
        if (M_my_alu_out == 8'hd8 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        opcode = 6'h18;
        if (M_my_alu_out == 8'h04 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        opcode = 6'h1e;
        if (M_my_alu_out == 8'h6c && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        opcode = 6'h16;
        if (M_my_alu_out == 8'h68 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        opcode = 6'h1a;
        if (M_my_alu_out == 8'h24 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        opcode = 6'h20;
        b = 8'h02;
        if (M_my_alu_out == 8'h90 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        opcode = 6'h21;
        b = 8'h02;
        if (M_my_alu_out == 8'h09 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        opcode = 6'h23;
        b = 8'h02;
        if (M_my_alu_out == 8'h09 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        opcode = 6'h33;
        if (M_my_alu_out == 8'h00 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = CMPLE_state;
        end
      end
      CMPLE_state: begin
        opcode = 6'h37;
        if (M_my_alu_out == 8'h01 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = CMPLT_state;
        end
      end
      CMPLT_state: begin
        opcode = 6'h35;
        if (M_my_alu_out == 8'h01 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = MUL_state;
        end
      end
      MUL_state: begin
        opcode = 6'h02;
        if (M_my_alu_out == 8'hb0 && M_myBlinker_hold_time == 1'h1) begin
          M_state_d = PASS_state;
        end
      end
      PASS_state: begin
        out = {4'h8{M_myBlinker_blink}};
        alufn = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
